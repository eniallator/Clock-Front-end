{
  "version": 3,
  "sources": ["../../../src/helpers.ts", "../../../src/index.ts"],
  "sourcesContent": ["// eslint-disable-next-line @typescript-eslint/no-unnecessary-type-parameters\nexport const getId = <E extends HTMLElement>(id: string) =>\n  document.getElementById(id) as E;\n\n// eslint-disable-next-line @typescript-eslint/no-unnecessary-type-parameters\nexport const getEl = <E extends HTMLElement>(\n  selector: string,\n  el: ParentNode = document\n) => el.querySelector(selector) as E;\n\nexport const getAll = <E extends HTMLElement>(\n  selector: string,\n  el: ParentNode = document\n) => el.querySelectorAll<E>(selector).entries();\n\n// eslint-disable-next-line @typescript-eslint/no-unnecessary-type-parameters\nexport const closestEl = <E extends HTMLElement>(\n  el: HTMLElement,\n  selector: string\n) => el.closest(selector) as E;\n\n// eslint-disable-next-line @typescript-eslint/no-unnecessary-type-parameters\nexport const toHtml = <E extends HTMLElement>(str: string): E => {\n  const el = document.createElement(\"template\");\n  el.innerHTML = str;\n  return el.content.children.item(0) as E;\n};\n", "import { closestEl, getAll, getEl, toHtml } from \"./helpers.ts\";\nimport { ForeachAble } from \"./types.ts\";\n\ngetAll('[tabindex=\"0\"]').forEach(([_, el]) => {\n  el.onkeyup = (evt) => {\n    if (evt.key === \"Enter\" && evt.target === el) el.click();\n  };\n});\n\nconst toggleBtnDisabled = (\n  btnEl: HTMLButtonElement,\n  isDisabled: boolean,\n  isEnabled: boolean = !isDisabled\n) => {\n  if (isDisabled) {\n    btnEl.setAttribute(\"disabled\", \"\");\n    btnEl.classList.add(\"button-disabled\");\n    btnEl.classList.remove(\"button-primary\");\n  } else if (isEnabled) {\n    btnEl.removeAttribute(\"disabled\");\n    btnEl.classList.remove(\"button-disabled\");\n    btnEl.classList.add(\"button-primary\");\n  }\n};\n\nconst saveBtn = getEl<HTMLButtonElement>(\"button[type=submit]\");\n\nconst timeRegex =\n  /^((0?[1-9]|1[0-2]):[0-5]\\d(am|pm)|([01]\\d|2[0-3]):[0-5]\\d)$/i;\nconst colorRegex = /^[\\da-f]{6}$/i;\n\nconst getErrorMsgEl = (inputEl: HTMLInputElement) =>\n  getEl(\".error-message\", closestEl(inputEl, \".form-control\"));\n\nconst toggleErrorMessage = (inputEl: HTMLInputElement, hide: boolean) => {\n  getErrorMsgEl(inputEl).classList.toggle(\"hidden\", hide);\n  const saveBtnDisabled = saveBtn.classList.contains(\"button-disabled\");\n  toggleBtnDisabled(\n    saveBtn,\n    !hide && !saveBtnDisabled,\n    getAll(\".error-message\").toArray().length ===\n      getAll(\".error-message.hidden\").toArray().length\n  );\n};\n\nconst initTimeInput = (el: HTMLInputElement) => {\n  el.onchange = () => {\n    const valid = timeRegex.test(el.value);\n    toggleErrorMessage(el, valid);\n  };\n};\n\ngetAll<HTMLInputElement>(\".time-input\").forEach(([_, el]) => {\n  initTimeInput(el);\n});\nconst toggle12hr = getEl<HTMLInputElement>(\".time-mode\");\n\nconst positiveMod = (a: number, b: number) => ((a % b) + b) % b;\n\nconst time24to12 = (hr: number, minStr: string) =>\n  `${positiveMod(hr - 1, 12) + 1}:${minStr}${hr < 12 ? \"am\" : \"pm\"}`;\nconst time12to24 = (hr: number, minStr: string, mode: string) =>\n  `${(hr % 12) + Number(mode === \"pm\") * 12}:`.padStart(3, \"0\") + minStr;\n\nconst time12hrRegex = /(1[0-2]|[1-9]):([0-5]\\d)(am|pm)/i;\nconst time24hrRegex = /(2[0-3]|[01]\\d):([0-5]\\d)/i;\n\ntoggle12hr.onchange = () => {\n  getAll<HTMLInputElement>(\".time-input\").forEach(([_, el]) => {\n    if (toggle12hr.checked) {\n      const [_, hrStr, minStr] = time24hrRegex.exec(el.value) ?? [];\n      if (hrStr != null && minStr != null) {\n        el.value = time24to12(Number(hrStr), minStr);\n      }\n    } else {\n      const [_, hrStr, minStr, mode] = time12hrRegex.exec(el.value) ?? [];\n      if (hrStr != null && minStr != null && mode != null) {\n        el.value = time12to24(Number(hrStr), minStr, mode);\n      }\n    }\n  });\n};\n\nconst timeInput = getEl<HTMLInputElement>(\"input[name=time]\");\n\ntimeInput.value = new Date()\n  .toLocaleString()\n  .replace(/\\d+\\/\\d+\\/\\d+[^\\d]*(?<t>\\d+:\\d+).*/, \"$<t>\");\n\nconst colorTextEl = getEl<HTMLInputElement>(\".color-input input[type=text]\");\nconst colorEl = getEl<HTMLInputElement>(\".color-input input[type=color]\");\n\ncolorEl.onchange = () => {\n  colorTextEl.value = colorEl.value.slice(1).toUpperCase();\n};\ncolorTextEl.onchange = () => {\n  const valid = colorRegex.test(colorTextEl.value);\n  toggleErrorMessage(colorTextEl, valid);\n  if (valid) colorEl.value = `#${colorTextEl.value}`;\n};\n\nconst rowsEl = getEl(\".collection-rows\");\nconst collectionLimit = Number(rowsEl.getAttribute(\"collection-limit\"));\nconst newRowBtn = getEl<HTMLButtonElement>(\".collection-new-row\");\nconst rowTemplateHtml = getEl(\".collection-template\").innerHTML;\n\nconst createAlarm = () => {\n  const newRow = toHtml<HTMLInputElement>(rowTemplateHtml);\n  rowsEl.appendChild(newRow);\n  const newTimeInput = newRow.querySelector<HTMLInputElement>(\".time-input\");\n  if (newTimeInput) {\n    initTimeInput(newTimeInput);\n  }\n\n  getEl(\".delete-row\", newRow).onclick = (evt) => {\n    evt.preventDefault();\n    newRow.remove();\n\n    if (newRowBtn.classList.contains(\"button-disabled\")) {\n      toggleBtnDisabled(newRowBtn, false);\n    }\n  };\n\n  if (rowsEl.children.length >= collectionLimit) {\n    toggleBtnDisabled(newRowBtn, true);\n  }\n\n  return newRow;\n};\n\nconst form = getEl<HTMLFormElement>(\"form\");\n\nconst updateFormInputs = (entries: ForeachAble<[string, string]>) => {\n  rowsEl.innerHTML = \"\";\n\n  entries.forEach(([key, value]) => {\n    switch (key) {\n      case \"time\": {\n        const [_, hrStr, minStr] = time24hrRegex.exec(value) ?? [];\n        if (hrStr != null && minStr != null) {\n          timeInput.value = `${hrStr}:${minStr}`;\n        }\n        break;\n      }\n\n      case \"brightness\": {\n        const brightnessNum = Number(value);\n        if (brightnessNum >= 0 && brightnessNum <= 1) {\n          getEl<HTMLInputElement>(\"input[name=brightness]\").value = value;\n        }\n        break;\n      }\n\n      case \"color\": {\n        const hexValue = value.slice(1).toUpperCase();\n        if (colorRegex.test(hexValue)) {\n          colorTextEl.value = hexValue;\n          colorEl.value = `#${hexValue}`;\n        }\n        break;\n      }\n\n      case \"alarm\": {\n        const [_, hrStr, minStr] = time24hrRegex.exec(value) ?? [];\n        if (hrStr != null && minStr != null) {\n          createAlarm().value = `${hrStr}:${minStr}`;\n        }\n        break;\n      }\n    }\n  });\n};\n\nconst getFormValue = (): IteratorObject<[string, string]> => {\n  const timeInputs = new Set(\n    getAll<HTMLInputElement>(\".time-input\").map(([_, el]) => el.name)\n  );\n  const formData = new FormData(form);\n\n  return formData\n    .entries()\n    .filter((entry): entry is [string, string] => !(entry[1] instanceof File))\n    .map(([key, value]) => {\n      if (timeInputs.has(key) && toggle12hr.checked) {\n        const [_, hrStr, minStr, mode] = time12hrRegex.exec(value) ?? [];\n\n        if (hrStr != null && minStr != null && mode != null) {\n          return [key, time12to24(Number(hrStr), minStr, mode)];\n        } else throw new Error(\"Error deserialising\");\n      } else {\n        return [key, value];\n      }\n    });\n};\n\nform.onsubmit = (evt) => {\n  evt.preventDefault();\n  evt.stopPropagation();\n\n  const query = new URLSearchParams([...getFormValue()]);\n\n  const { protocol, host, pathname } = location;\n  const url = `${protocol}//${host}${pathname}?${query.toString()}`;\n\n  void fetch(url, { method: \"GET\" });\n\n  history.pushState(null, \"\", url);\n};\n\nconst queryRegex = /\\?.+/;\nsetInterval(() => {\n  void fetch(`${location.protocol}//${location.host}`, {\n    method: \"GET\",\n  }).then(({ url }) => {\n    const [_, query] = queryRegex.exec(url) ?? [];\n    if (query != null) {\n      updateFormInputs(new URLSearchParams(query).entries());\n    }\n  });\n}, 5000);\n\nnewRowBtn.onclick = createAlarm;\n\nconst initialValues = new URLSearchParams(location.search);\nupdateFormInputs(initialValues.entries());\n\n// Time input make an option to send \"now\" instead of a time\n"],
  "mappings": "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",
  "names": ["getEl", "selector", "el", "getAll", "closestEl", "toHtml", "str", "getAll", "_", "el", "evt", "toggleBtnDisabled", "btnEl", "isDisabled", "isEnabled", "saveBtn", "getEl", "timeRegex", "colorRegex", "getErrorMsgEl", "inputEl", "closestEl", "toggleErrorMessage", "hide", "saveBtnDisabled", "initTimeInput", "valid", "toggle12hr", "positiveMod", "a", "b", "time24to12", "hr", "minStr", "time12to24", "mode", "time12hrRegex", "time24hrRegex", "hrStr", "timeInput", "colorTextEl", "colorEl", "rowsEl", "collectionLimit", "newRowBtn", "rowTemplateHtml", "createAlarm", "newRow", "toHtml", "newTimeInput", "form", "updateFormInputs", "entries", "key", "value", "brightnessNum", "hexValue", "getFormValue", "timeInputs", "entry", "query", "protocol", "host", "pathname", "url", "queryRegex", "initialValues"]
}
