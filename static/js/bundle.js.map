{
  "version": 3,
  "sources": ["../../../src/helpers.ts", "../../../src/index.ts"],
  "sourcesContent": ["// eslint-disable-next-line @typescript-eslint/no-unnecessary-type-parameters\nexport const getId = <E extends HTMLElement>(id: string) =>\n  document.getElementById(id) as E;\n\n// eslint-disable-next-line @typescript-eslint/no-unnecessary-type-parameters\nexport const getEl = <E extends HTMLElement>(\n  selector: string,\n  el: ParentNode = document\n) => el.querySelector(selector) as E;\n\nexport const getAll = <E extends HTMLElement>(\n  selector: string,\n  el: ParentNode = document\n) => [...el.querySelectorAll<E>(selector)];\n\n// eslint-disable-next-line @typescript-eslint/no-unnecessary-type-parameters\nexport const closestEl = <E extends HTMLElement>(\n  el: HTMLElement,\n  selector: string\n) => el.closest(selector) as E;\n\n// eslint-disable-next-line @typescript-eslint/no-unnecessary-type-parameters\nexport const toHtml = <E extends HTMLElement>(str: string): E => {\n  const el = document.createElement(\"template\");\n  el.innerHTML = str;\n  return el.content.children.item(0) as E;\n};\n", "import { closestEl, getAll, getEl, toHtml } from \"./helpers.ts\";\n\ngetAll('[tabindex=\"0\"]').forEach((el) => {\n  el.onkeyup = (evt) => {\n    if (evt.key === \"Enter\" && evt.target === el) el.click();\n  };\n});\n\nconst toggleBtnDisabled = (\n  btnEl: HTMLButtonElement,\n  isDisabled: boolean,\n  isEnabled: boolean = !isDisabled\n) => {\n  if (isDisabled) {\n    btnEl.setAttribute(\"disabled\", \"\");\n    btnEl.classList.add(\"button-disabled\");\n    btnEl.classList.remove(\"button-primary\");\n  } else if (isEnabled) {\n    btnEl.removeAttribute(\"disabled\");\n    btnEl.classList.remove(\"button-disabled\");\n    btnEl.classList.add(\"button-primary\");\n  }\n};\n\nconst saveBtn = getEl<HTMLButtonElement>(\"button[type=submit]\");\n\nconst timeRegex =\n  /^((0?[1-9]|1[0-2]):[0-5]\\d(am|pm)|([01]\\d|2[0-3]):[0-5]\\d)$/i;\nconst colorRegex = /^[\\da-f]{6}$/i;\n\nconst getErrorMsgEl = (inputEl: HTMLInputElement) =>\n  getEl(\".error-message\", closestEl(inputEl, \".form-control\"));\n\nconst toggleErrorMessage = (inputEl: HTMLInputElement, hide: boolean) => {\n  getErrorMsgEl(inputEl).classList.toggle(\"hidden\", hide);\n  const saveBtnDisabled = saveBtn.classList.contains(\"button-disabled\");\n  toggleBtnDisabled(\n    saveBtn,\n    !hide && !saveBtnDisabled,\n    getAll(\".error-message\").length === getAll(\".error-message.hidden\").length\n  );\n};\n\nconst initTimeInput = (el: HTMLInputElement) => {\n  el.onchange = () => {\n    const valid = timeRegex.test(el.value);\n    toggleErrorMessage(el, valid);\n  };\n};\n\ngetAll<HTMLInputElement>(\".time-input\").forEach(initTimeInput);\nconst timeModeToggle = getEl<HTMLInputElement>(\".time-mode\");\n\nconst positiveMod = (a: number, b: number) => ((a % b) + b) % b;\n\nconst time24to12 = (hr: number, minStr: string) =>\n  `${positiveMod(hr - 1, 12) + 1}:${minStr}${hr < 12 ? \"am\" : \"pm\"}`;\nconst time12to24 = (hr: number, minStr: string, mode: string | undefined) =>\n  `${(hr % 12) + Number(mode === \"pm\") * 12}:`.padStart(3, \"0\") + minStr;\n\nconst timeTo24Hr = (hrStr: string, minStr: string, mode: string | undefined) =>\n  mode != null ? time12to24(Number(hrStr), minStr, mode) : `${hrStr}:${minStr}`;\n\nconst timePartsRegex = /(\\d+):(\\d+)(am|pm)?/i;\n\ntimeModeToggle.onchange = () => {\n  getAll<HTMLInputElement>(\".time-input\").forEach((el) => {\n    const [_, hrStr, minStr, mode] = timePartsRegex.exec(el.value) ?? [];\n    if (hrStr == null || minStr == null) return;\n\n    const hr = Number(hrStr);\n\n    if (timeModeToggle.checked && hr < 24) {\n      el.value = time24to12(hr, minStr);\n    } else if (!timeModeToggle.checked && hr > 0 && hr <= 12) {\n      el.value = time12to24(hr, minStr, mode);\n    }\n  });\n};\n\nconst timeInput = getEl<HTMLInputElement>(\"input[name=time]\");\n\ntimeInput.value = new Date()\n  .toLocaleString()\n  .replace(/\\d+\\/\\d+\\/\\d+[^\\d]*(?<t>\\d+:\\d+).*/, \"$<t>\");\n\nconst colorTextEl = getEl<HTMLInputElement>(\".color-input input[type=text]\");\nconst colorEl = getEl<HTMLInputElement>(\".color-input input[type=color]\");\n\ncolorEl.onchange = () => {\n  colorTextEl.value = colorEl.value.slice(1).toUpperCase();\n};\ncolorTextEl.onchange = () => {\n  const valid = colorRegex.test(colorTextEl.value);\n  toggleErrorMessage(colorTextEl, valid);\n  if (valid) colorEl.value = `#${colorTextEl.value}`;\n};\n\nconst rowsEl = getEl(\".collection-rows\");\nconst collectionLimit = Number(rowsEl.getAttribute(\"collection-limit\"));\nconst newRowBtn = getEl<HTMLButtonElement>(\".collection-new-row\");\nconst rowTemplateHtml = getEl(\".collection-template\").innerHTML;\n\nconst createAlarm = () => {\n  const newRow = toHtml<HTMLInputElement>(rowTemplateHtml);\n  rowsEl.appendChild(newRow);\n  const newTimeInput = newRow.querySelector<HTMLInputElement>(\".time-input\");\n  if (newTimeInput) {\n    initTimeInput(newTimeInput);\n  }\n\n  getEl(\".delete-row\", newRow).onclick = (evt) => {\n    evt.preventDefault();\n    newRow.remove();\n\n    if (newRowBtn.classList.contains(\"button-disabled\")) {\n      toggleBtnDisabled(newRowBtn, false);\n    }\n  };\n\n  if (rowsEl.children.length >= collectionLimit) {\n    toggleBtnDisabled(newRowBtn, true);\n  }\n\n  return newRow;\n};\n\nnewRowBtn.onclick = createAlarm;\n\nconst initialValues = new URLSearchParams(location.search);\n\nfor (const [key, value] of initialValues.entries()) {\n  switch (key) {\n    case \"time\": {\n      const [_, hrStr, minStr, mode] = timePartsRegex.exec(value) ?? [];\n      if (hrStr != null && minStr != null) {\n        timeInput.value = timeTo24Hr(hrStr, minStr, mode);\n      }\n      break;\n    }\n\n    case \"brightness\": {\n      const brightnessNum = Number(value);\n      if (brightnessNum >= 0 && brightnessNum <= 1) {\n        getEl<HTMLInputElement>(\"input[name=brightness]\").value = value;\n      }\n      break;\n    }\n\n    case \"color\": {\n      const hexValue = value.slice(1).toUpperCase();\n      if (colorRegex.test(hexValue)) {\n        colorTextEl.value = hexValue;\n        colorEl.value = `#${hexValue}`;\n      }\n      break;\n    }\n\n    case \"alarm\": {\n      const [_, hrStr, minStr, mode] = timePartsRegex.exec(value) ?? [];\n      if (hrStr != null && minStr != null) {\n        createAlarm().value = timeTo24Hr(hrStr, minStr, mode);\n      }\n      break;\n    }\n  }\n}\n\n// Time input make an option to send \"now\" instead of a time\n"],
  "mappings": "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",
  "names": ["getEl", "selector", "el", "getAll", "closestEl", "toHtml", "str", "getAll", "el", "evt", "toggleBtnDisabled", "btnEl", "isDisabled", "isEnabled", "saveBtn", "getEl", "timeRegex", "colorRegex", "getErrorMsgEl", "inputEl", "closestEl", "toggleErrorMessage", "hide", "saveBtnDisabled", "initTimeInput", "valid", "timeModeToggle", "positiveMod", "a", "b", "time24to12", "hr", "minStr", "time12to24", "mode", "timeTo24Hr", "hrStr", "timePartsRegex", "_", "timeInput", "colorTextEl", "colorEl", "rowsEl", "collectionLimit", "newRowBtn", "rowTemplateHtml", "createAlarm", "newRow", "toHtml", "newTimeInput", "initialValues", "key", "value", "brightnessNum", "hexValue"]
}
